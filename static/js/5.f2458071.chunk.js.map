{"version":3,"sources":["Components/Chart.js","Components/ChartFrame.js"],"names":["Plot","createPlotlyComponent","Plotly","Chart","props","data","x","date","open","high","low","close","type","dateAverage","y","average","mode","line","width","color","layout","autosize","height","title","ticker","sma","require","reFormat","apiResponse","quotes","response","forEach","element","push","slice","listify","ChartFrame","state","nextProps","axios","urlRemote","then","results","console","log","setState","this","Component"],"mappings":"iNAKMA,EAAOC,IAAsBC,KAoCpBC,MAnCf,SAAeC,GACX,OACI,cAACJ,EAAD,CACIK,KAAM,CACF,CACIC,EAAGF,EAAMG,KACTC,KAAMJ,EAAMI,KACZC,KAAML,EAAMK,KACZC,IAAKN,EAAMM,IACXC,MAAOP,EAAMO,MACbC,KAAM,eAEV,CACIA,KAAM,OACNN,EAAGF,EAAMS,YACTC,EAAGV,EAAMW,QACTC,KAAK,QACLC,KAAK,CACDC,MAAM,EACNC,MAAO,UAKnBC,OAAQ,CACJC,UAAU,EAEVC,OAAQ,IACRC,MAAOnB,EAAMoB,W,iBC9BzBC,EAAMC,EAAQ,MA8BlB,SAASC,EAASC,GAChB,IAAIC,EAASD,EAAW,OACpBE,EA9BN,SAAiBzB,GACf,IAAIG,EAAO,GACPC,EAAO,GACPC,EAAM,GACNC,EAAQ,GACRJ,EAAO,GAoBX,OAlBAF,EAAK0B,SAAQ,SAAAC,GACXxB,EAAKyB,KAAKD,EAAQxB,MAClBC,EAAKwB,KAAKD,EAAQvB,MAClBC,EAAIuB,KAAKD,EAAQtB,KACjBC,EAAMsB,KAAKD,EAAQrB,OACnBJ,EAAK0B,KAAKD,EAAQzB,SAGL,CACbC,KAAMA,EAAK0B,MAAM,IACjBzB,KAAMA,EAAKyB,MAAM,IACjBxB,IAAKA,EAAIwB,MAAM,IACfvB,MAAOA,EAAMuB,MAAM,IACnB3B,KAAMA,EAAK2B,MAAM,IACjBnB,QAASU,EAAId,EAAO,IACpBE,YAAaN,EAAK2B,MAAM,KAQXC,CAAQN,EAAM,MAG7B,OAFAC,EAAQ,OAAaD,EAAM,OAEpBC,E,IAIHM,E,kDAEJ,WAAYhC,GAAQ,IAAD,8BACjB,cAAMA,IACDiC,MAAQ,GAFI,E,qDAKnB,c,uCAIA,SAA0BC,GAAW,IAAD,OAElCC,IAAMC,6CAAqBF,EAAS,QACnCG,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAQrC,MACpB,EAAKwC,SAASlB,EAASe,EAAQrC,Y,oBAKnC,WACE,OACE,8BACE,cAAC,EAAD,CACEG,KAAMsC,KAAKT,MAAM7B,KACjBC,KAAMqC,KAAKT,MAAM5B,KACjBC,IAAKoC,KAAKT,MAAM3B,IAChBC,MAAOmC,KAAKT,MAAM1B,MAClBJ,KAAMuC,KAAKT,MAAM9B,KACjBQ,QAAS+B,KAAKT,MAAMtB,QACpBF,YAAaiC,KAAKT,MAAMxB,YACxBW,OAAQsB,KAAKT,MAAMb,e,GAhCJuB,aAwCVX,a","file":"static/js/5.f2458071.chunk.js","sourcesContent":["import React from 'react';\r\nimport Plotly from \"plotly.js\"\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\n\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\nfunction Chart(props) {\r\n    return (\r\n        <Plot\r\n            data={[\r\n                {\r\n                    x: props.date,\r\n                    open: props.open,\r\n                    high: props.high,\r\n                    low: props.low,\r\n                    close: props.close,\r\n                    type: 'candlestick',\r\n                },\r\n                {\r\n                    type: 'line',\r\n                    x: props.dateAverage,\r\n                    y: props.average,\r\n                    mode:\"lines\",\r\n                    line:{\r\n                        width:1,\r\n                        color: \"#F00\"\r\n                    }\r\n                    \r\n                },\r\n            ]}\r\n            layout={{\r\n                autosize: true,\r\n                // width: 1400,\r\n                height: 540, \r\n                title: props.ticker\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\n\r\nexport default Chart;","import Chart from './Chart';\nimport { Component } from \"react\";\nimport axios from \"axios\";\n  \nvar sma = require('sma');\n\nfunction listify(data) {\n  var open = [];\n  var high = [];\n  var low = [];\n  var close = [];\n  var date = [];\n\n  data.forEach(element => {\n    open.push(element.open);\n    high.push(element.high);\n    low.push(element.low);\n    close.push(element.close);\n    date.push(element.date);\n  });\n\n  let response = {\n    open: open.slice(43),\n    high: high.slice(43),\n    low: low.slice(43),\n    close: close.slice(43),\n    date: date.slice(43),\n    average: sma(close, 44),\n    dateAverage: date.slice(43)\n  }\n  // console.log(response)\n  return response;\n}\n\nfunction reFormat(apiResponse) {\n  let quotes = apiResponse[\"quotes\"];\n  let response = listify(quotes[\"data\"]);\n  response[\"ticker\"] = quotes[\"ticker\"];\n  // response.merge();\n  return response;\n}\n\n\nclass ChartFrame extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidMount() {\n    \n  }\n\n  componentWillReceiveProps(nextProps){\n    let urlRemote=\"https://stockdataapi.herokuapp.com\";\n    axios(urlRemote+'/ticker/'+nextProps[\"ticker\"])\n    .then((results) => {\n      console.log(results.data)\n      this.setState(reFormat(results.data))\n    }\n  );\n  }\n\n  render() {\n    return (\n      <div>\n        <Chart\n          open={this.state.open}\n          high={this.state.high}\n          low={this.state.low}\n          close={this.state.close}\n          date={this.state.date}\n          average={this.state.average}\n          dateAverage={this.state.dateAverage}\n          ticker={this.state.ticker}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default ChartFrame;\n"],"sourceRoot":""}